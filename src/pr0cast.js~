var init_module = function (global) {

  // alias: global namespace
  var window = global.window,
      document = global.document,
      console = global.console;

  // alias: chrome
  var chrome = global.chrome;

  // alias: jquery
  var $ = global.jQuery;

  /*
   * Pr0cast class
   *
   */

  var Pr0cast = function () {
    var self = this;
    self.appId = chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID;
  };

  Pr0cast.prototype.init = function () {
    var self = this;

    var sess_req = new chrome.cast.SessionRequest(self.appId);
    var api_conf = new chrome.cast.ApiConfig(sess_req,
        self._sessionListener,
        self._receiverListener
        );

    chrome.cast.initialize(api_conf, console.log, console.log);
  };

  Pr0cast.prototype._sessionListener = function (session) {
    var self = this;
    self._session = session;
  };

  Pr0cast.prototype._receiverListener = function (avail) {
    var self = this;

    if (avail == chrome.cast.ReceiverAvailability.AVAILABLE) {
      console.log("Receiver available!");
    }
  };

  /*
   * Pr0cast: pick receiver
   *
   */

  Pr0cast.prototype.requestSession = function (cb) {
    var self = this;

    chrome.cast.requestSession(function (s) {
      self._onRequestSessionSuccess(s,cb);
    }, console.log);
  };

  Pr0cast.prototype._onRequestSessionSuccess = function (session, cb) {
    var self = this;

    // store
    self._session = session;

    if (typeof cb == "function") {
      cb();
    }
  };

  /*
   * Pr0cast: send media to device
   *
   */

  Pr0cast.prototype.load = function (url, mime, cb) {
    var self = this;

    // alias
    var session = self._session;

    // select session if not available
    if (!session) {
      return self.requestSession(function () { self.load(url, mime, cb); });
    }

    var media_info = new chrome.cast.media.MediaInfo(url, mime);
    var request    = new chrome.cast.media.LoadRequest(media_info);

    session.loadMedia(request,
        self._onMediaDiscovered,
        self._onMediaError
        );

  };

  Pr0cast.prototype._onMediaDiscovered = function (how, media) {
    var self = this;
    console.log(how);
    console.log(media);
    self._currentMedia = media;
  }

  Pr0cast.prototype._onMediaError = function (e) {
    console.error(e);
  }

  /*
   * Detect next image
   *
   */

  Pr0cast.prototype.detectImageChange = function () {
    var self = this;

    var stream = $("#stream")[0];

    console.log(stream);

    var mutationObserver = self._mutationObserver
                         = new MutationObserver(self._mutationObserverCallback);

    // observe child addition/removals
    mutationObserver.observe(stream, {
      childList: true,
      subtree: true,
    });
  }

  Pr0cast.prototype._mutationObserverCallback = function (mutations) {
    console.log(mutations);

    for (var i = 0; i < mutations.length; i++) {
      var mutation_record = mutations[i];

      for (var j = 0; j < mutation_record.addedNodes.length; j++) {
        var added = mutation_record.addedNodes[j];

        if (added.classList.contains("item-container")) {
          var container = $(added);
          var img = container.find(".item-image");
          if (img.length == 0) {
          }

        }
      }
    }
  }

  /*
   * run
   *
   */

  var pr0cast = global.pr0cast = new Pr0cast();

  pr0cast.init();

};

window['__onGCastApiAvailable'] = function (loaded, error) {
  if (loaded) {
    init_module(this);
  } else {
    console.log(error);
  }
};
